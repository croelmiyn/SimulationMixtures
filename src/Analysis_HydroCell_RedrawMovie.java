import ij.IJ;
import ij.ImagePlus;
import ij.gui.GenericDialog;
import ij.io.LogStream;
import ij.io.OpenDialog;
import ij.io.SaveDialog;
import ij.plugin.PlugIn;
import ij.process.ImageProcessor;
import mpi.rc.IJ.IJutilities.ConcurrencyUtils;
import mpi.rc.IJ.IJutilities.MersenneTwister;

import java.io.FileReader;
import java.io.FileWriter;
import java.util.Scanner;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

public class Analysis_HydroCell_RedrawMovie implements PlugIn{

    /*
    Simulation of hydrodynamic interactions following the algorithm of Hernandez-Ortiz et al. J. Chem. Phys. (2006)
    This class is the PlugIn for redrawing the movie of tracers in the flow field generated by many circular swimmers
     */

    private double[][] Xt;
    private double[][] Yt;
    private double[][] Zt;

    private int Nc;

    private int Nt;

    private int nthreads = ConcurrencyUtils.getNumberOfThreads();
    private int count;

    @Override
    public void run(String arg) {

        LogStream.redirectSystem();

        GenericDialog gd = new GenericDialog("params, z=0-H, x=0-Width");
        gd.addNumericField("Width (pxH)", 128,0);
        gd.addNumericField("resolution (px/pxH)", 2,0);
        gd.addNumericField("aEff (effectiveSize, px(=um))",1.0,1);
        gd.addNumericField("h (print)",8,1);
        gd.addNumericField("dh (print)",4.0,1);

        gd.showDialog();


        int W = (int)gd.getNextNumber();
        final int nx = (int)gd.getNextNumber();
        double a_eff = gd.getNextNumber(); // Gaussian cutoff for smoothing the force
        double h = gd.getNextNumber();
        double dh = gd.getNextNumber();

        Xt = load("fileName_X");
        Yt = load("fileName_Y");
        Zt = load("fileName_Z");

        ImagePlus impX = print(Xt,Yt,Zt, h,W,nx, dh, a_eff);

        impX.show();

    }

    public double[][] load(String name){

        OpenDialog od = new OpenDialog(name);
        String filename = od.getDirectory()+od.getFileName();

        return read(filename);

    }

    private double[][] read(String filename){

        try {

            FileReader file = new FileReader(filename);
            Scanner scanner = new Scanner(file);

            Scanner sc = new Scanner(scanner.nextLine());	// scanner on first line
            // read the number of columns (time)
            Nt = 0;
            while (sc.hasNext()) {
                sc.next();
                Nt++;
            }
            sc.close();

            // read the number of lines (particles)
            Nc = 1; // the first line has already been counted
            while (scanner.hasNextLine()){
                scanner.nextLine();
                Nc++;
            }
            scanner.close();
            file.close();

            // allocate
            double[][] v = new double[Nc][Nt];

            // reposition scanner at start for reading
            file = new FileReader(filename);
            scanner = new Scanner(file);

            // reading
            int k = 0;
            while (scanner.hasNextLine()) {
                sc = new Scanner(scanner.nextLine()); // next Line
                int t=0;
                while (sc.hasNext()) { // going through the line
                    v[k][t] = Double.valueOf(sc.next());
                    t++;
                }
                k++;
                sc.close();
            }
            scanner.close();
            file.close();

            IJ.showStatus("Done");

            return v;

        } catch (Exception e){
            IJ.log("Erreur doSave --> "+e.getMessage());
            IJ.log("Erreur doSave --> "+e.getCause());
            IJ.log("Erreur doSave --> "+e.getLocalizedMessage());

            IJ.showStatus("Failed");

            return null;
        }



    }

    private ImagePlus print(double[][] X,double[][] Y,double[][] Z, double h,double W,double nx,double dh,double a){

        ImagePlus imp = IJ.createImage("XY_h-"+h+"_dh-"+dh+"_a-"+a+"_","32-bit",(int)(W*nx),(int)(W*nx),1,1,X[0].length);
        ImageProcessor ip = imp.getProcessor();

        for(int t=0;t<X[0].length;t++){
            IJ.showProgress((double)t/X[0].length);

            imp.setT(t+1);

            drawParticles(ip,X,Y,Z,t,h,dh,a);


        }

        return imp;

    }

    private void drawParticles(ImageProcessor ip1,  double[][] X, double[][] Y, double[][] Z, int t,double h,double dh, double a){

        int xmin,xmax,ymin,ymax;

        double px,yl,xl,s2,s,as2;

        int widthInt = ip1.getWidth();

        //double a=1.0, dh = 4.0;

        for(int k=0; k<X.length;k++){

            s = (Z[k][t]-h)/dh;
            s2 = 1+3*s*s;
            as2 = a*a*s2/2;

            xmin = (int) ( (X[k][t]-3*a) );
            xmax = (int) ( (X[k][t]+3*a) );
            ymin = (int) ( (Y[k][t]-3*a) );
            ymax = (int) ( (Y[k][t]+3*a) );


            for(int xx=xmin; xx<=xmax; xx++){

                for(int yy=ymin; yy<=ymax; yy++){
                    //if(( (xx-res*X[k])*(xx-res*X[k]) +(yy-res*Y[k])*(yy-res*Y[k])) <= res*res*a*a ){

                    px = ip1.getPixelValue(xx-(int)Math.floor((double)xx/widthInt)*widthInt, yy-(int)Math.floor((double)yy/widthInt)*widthInt);

                    xl = (double)xx;
                    yl = (double)yy;

                    px += 100*Math.exp(-( (xl-X[k][t])*(xl-X[k][t]) + (yl-Y[k][t])*(yl-Y[k][t]) )/(as2)  )/s2;

                    ip1.putPixelValue(xx-(int)Math.floor((double)xx/widthInt)*widthInt, yy-(int)Math.floor((double)yy/widthInt)*widthInt, px);

                    //}

                }


            }

        }

    }

    private void waitForCompletion(Future<?>[] futures, String name) {
        try {
            ConcurrencyUtils.waitForCompletion(futures);
        } catch (InterruptedException ex) {
            IJ.log("Interruption Exception "+name);
            IJ.log("LocMessage --> " + ex.getLocalizedMessage());
            ex.printStackTrace();

        } catch (ExecutionException ex) {
            IJ.log("Execution Exception "+name);
            IJ.log("LocMessage --> " + ex.getLocalizedMessage());
            ex.printStackTrace();

        }
    }


}
